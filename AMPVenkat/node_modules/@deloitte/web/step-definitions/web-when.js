const { When } = require('@cucumber/cucumber');
const pageActions = require('@deloitte/web/utils/web-actions/page-actions');
const elementActions = require('../utils/web-actions/index');
const { keys } = require('webdriverio');

When(/^I refresh the page/, { timeout: 2 * 60000 }, async () => {
  await elementActions.refreshPage();
});

When(/^I enter "([^"]*)" in the element "([^"]*)" of the user "([^"]*)"$/, { timeout: 2 * 60000 }, async (testDataKey, locatorName, user) => {
  await elementActions.enterText(testDataKey, locatorName, user);
});

When(/^I enter "([^"]*)" in the web element "([^"]*)"$/, { timeout: 2 * 60000 }, async (testDataKey, locatorName) => {
  await elementActions.setValue(locatorName, testDataKey);
});

When(/^I press tab/, { timeout: 2 * 60000 }, async () => {
  await elementActions.tab();
});

When(/^I wait for "([^"]*)" seconds$/, { timeout: 2 * 60000 }, async (waitTimeInSeconds) => {
  await elementActions.pause(waitTimeInSeconds);
});

When(/^I navigate back in the browser history/, { timeout: 2 * 60000 }, async () => {
  await elementActions.navigateBack();
});

When(/^I switch tab via page title "([^"]*)"/, { timeout: 2 * 60000 }, async (title) => {
  await elementActions.switchTab(title);
});
When(/^I switch to the newly opened tab/, { timeout: 2 * 60000 }, async () => {
  await pageActions.switchToNewTab();
});
When(/^I switch to the recently opened tab/, async () => {
  await pageActions.switchToRecentlyOpenedTab();
});
When(/^I dismiss the location pop-up/, async () => {
  await pageActions.switchtoAlert().dismiss();
});
When(/^I switch to window at index (\d+)$/, { timeout: 2 * 60000 }, async (index) => {
  await pageActions.switchToWindowAtIndex(index);
});
When(/^I close window at index (\d+)$/, { timeout: 2 * 60000 }, async (index) => {
  await pageActions.closeWindowAtIndex(index);
});
When(/^I close the current tab/, { timeout: 2 * 60000 }, async () => {
  const windowHandle = await browser.getWindowHandle();
  await pageActions.closeCurrentTab(windowHandle);
});
When(/^I stay on the window at index (\d+)$/, { timeout: 2 * 60000 }, async (index) => {
  await pageActions.stayonwindow(index);
});
When(/^I tap Enter on the web page/, { timeout: 2 * 60000 }, async () => {
  await pageActions.pressEnter(); // '\uE007' is the Unicode representation of the "Enter" key
});