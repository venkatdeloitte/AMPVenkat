var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _EdgedriverService_instances, _EdgedriverService_process, _EdgedriverService_options, _EdgedriverService_startDriver, _EdgedriverService_stopDriver, _EdgedriverService_mapCapabilities;
import path from 'node:path';
import fsp from 'node:fs/promises';
import getPort from 'get-port';
import logger from '@wdio/logger';
import waitPort from 'wait-port';
import { start, download } from 'edgedriver';
import { SevereServiceError } from 'webdriverio';
import { pkg } from './constants.js';
import { getFilePath, isMultiremote, isEdge } from './utils.js';
const POLL_INTERVAL = 100;
const POLL_TIMEOUT = 10000;
const log = logger('wdio-edgedriver-service');
class EdgedriverService {
    constructor(options = {}, _, config) {
        _EdgedriverService_instances.add(this);
        _EdgedriverService_process.set(this, void 0);
        _EdgedriverService_options.set(this, void 0);
        log.info(`Initiate Edgedriver Service (v${pkg.version})`);
        __classPrivateFieldSet(this, _EdgedriverService_options, {
            outputDir: config.outputDir,
            edgedriverOptions: {
                baseUrl: '/',
                ...(config.outputDir ? { logLevel: 'ALL' } : {}),
                ...options.edgedriverOptions
            },
            ...options
        }, "f");
    }
    onPrepare() {
        return download(__classPrivateFieldGet(this, _EdgedriverService_options, "f").edgedriverOptions?.edgeDriverVersion);
    }
    beforeSession(_, capabilities, __, cid) {
        if (!isEdge(capabilities)) {
            return;
        }
        return __classPrivateFieldGet(this, _EdgedriverService_instances, "m", _EdgedriverService_startDriver).call(this, capabilities, cid);
    }
    afterSession() {
        return __classPrivateFieldGet(this, _EdgedriverService_instances, "m", _EdgedriverService_stopDriver).call(this);
    }
}
_EdgedriverService_process = new WeakMap(), _EdgedriverService_options = new WeakMap(), _EdgedriverService_instances = new WeakSet(), _EdgedriverService_startDriver = async function _EdgedriverService_startDriver(capabilities, cid) {
    const port = __classPrivateFieldGet(this, _EdgedriverService_options, "f").edgedriverOptions?.port || await getPort();
    const baseUrl = __classPrivateFieldGet(this, _EdgedriverService_options, "f").edgedriverOptions?.baseUrl || '/';
    __classPrivateFieldGet(this, _EdgedriverService_instances, "m", _EdgedriverService_mapCapabilities).call(this, capabilities, baseUrl, port);
    if (__classPrivateFieldGet(this, _EdgedriverService_options, "f").outputDir && __classPrivateFieldGet(this, _EdgedriverService_options, "f").edgedriverOptions) {
        const logfileName = typeof __classPrivateFieldGet(this, _EdgedriverService_options, "f").logFileName === 'function'
            ? __classPrivateFieldGet(this, _EdgedriverService_options, "f").logFileName(capabilities, cid)
            : `wdio-edgedriver-service-${cid}.log`;
        const logFile = getFilePath(__classPrivateFieldGet(this, _EdgedriverService_options, "f").outputDir, logfileName);
        await fsp.mkdir(path.dirname(logFile), { recursive: true });
        __classPrivateFieldGet(this, _EdgedriverService_options, "f").edgedriverOptions.logPath = logFile;
    }
    __classPrivateFieldSet(this, _EdgedriverService_process, await start({ ...__classPrivateFieldGet(this, _EdgedriverService_options, "f").edgedriverOptions, port, baseUrl }), "f");
    log.info(`Edgedriver started for worker ${process.env.WDIO_WORKER_ID} on port ${port} with args: ${__classPrivateFieldGet(this, _EdgedriverService_process, "f").spawnargs.join(' ')}`);
    const { open } = await waitPort({
        timeout: POLL_TIMEOUT,
        interval: POLL_INTERVAL,
        port
    });
    if (!open) {
        throw new SevereServiceError('EdgeDriver failed to start.');
    }
    process.on('exit', __classPrivateFieldGet(this, _EdgedriverService_instances, "m", _EdgedriverService_stopDriver).bind(this));
    process.on('SIGINT', __classPrivateFieldGet(this, _EdgedriverService_instances, "m", _EdgedriverService_stopDriver).bind(this));
    process.on('uncaughtException', __classPrivateFieldGet(this, _EdgedriverService_instances, "m", _EdgedriverService_stopDriver).bind(this));
}, _EdgedriverService_stopDriver = function _EdgedriverService_stopDriver() {
    if (__classPrivateFieldGet(this, _EdgedriverService_process, "f")) {
        log.info(`Shutting down Edgedriver for ${process.env.WDIO_WORKER_ID}`);
        __classPrivateFieldGet(this, _EdgedriverService_process, "f").kill();
        __classPrivateFieldSet(this, _EdgedriverService_process, undefined, "f");
    }
}, _EdgedriverService_mapCapabilities = function _EdgedriverService_mapCapabilities(capabilities, path, port) {
    if (isMultiremote(capabilities)) {
        for (const cap in capabilities) {
            const caps = capabilities[cap].capabilities;
            if (isEdge(caps)) {
                Object.assign(caps, { port, path });
            }
        }
        return;
    }
    Object.assign(capabilities, { port, path });
};
export default EdgedriverService;
